CREATE TABLE IF NOT EXISTS PUBLIC.users (
	user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_email VARCHAR (255) NOT NULL,
	user_login VARCHAR (255) NOT NULL,
	user_name VARCHAR (255) NOT NULL,
	user_birthday DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS PUBLIC.films (
	film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	film_name VARCHAR (255) NOT NULL,
	description VARCHAR (255) NOT NULL,
	release_date DATE NOT NULL,
	duration INTEGER NOT NULL,
	rating_id VARCHAR (8) NOT NULL
);

CREATE TABLE IF NOT EXISTS PUBLIC.friends (
	user_id INTEGER NOT NULL PRIMARY KEY,
	friend_id INTEGER NOT NULL,
	confirmed BOOLEAN
);

CREATE TABLE IF NOT EXISTS PUBLIC.likes (
	user_id INTEGER NOT NULL PRIMARY KEY,
	film_id INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS PUBLIC.rating (
	rating_id INTEGER NOT NULL PRIMARY KEY,
	rating_name VARCHAR
);

CREATE TABLE IF NOT EXISTS PUBLIC.genre (
	genre_id INTEGER NOT NULL PRIMARY KEY,
	genre_name VARCHAR
);

CREATE TABLE IF NOT EXISTS PUBLIC.films_genres(
	film_id INTEGER NOT NULL PRIMARY KEY,
	genre_id INTEGER NOT NULL
);

ALTER TABLE PUBLIC.LIKES  ADD CONSTRAINT LIKES_USER_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID);
ALTER TABLE PUBLIC.LIKES  ADD CONSTRAINT LIKES_FILM_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID);

ALTER TABLE PUBLIC.FRIENDS  ADD CONSTRAINT FRIENDS_USER_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID);
ALTER TABLE PUBLIC.FRIENDS  ADD CONSTRAINT FRIENDS_FRIEND_FK FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID);

ALTER TABLE PUBLIC.FILMS ADD CONSTRAINT FILMS_RATING_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATING(RATING_ID);

ALTER TABLE PUBLIC.films_genres ADD CONSTRAINT FILMS_FK FOREIGN KEY (film_id) REFERENCES PUBLIC.FILMS(film_id);
ALTER TABLE PUBLIC.films_genres ADD CONSTRAINT GENRES_FK FOREIGN KEY (genre_id) REFERENCES PUBLIC.GENRE(genre_id);
